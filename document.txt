REPORTS API - สรุปการทำงานทั้งหมด

=== ภาพรวมของระบบ ===
Reports API เป็น backend service ที่พัฒนาด้วย Go สำหรับจัดการ:
- ปัญหา (Problems)
- งาน (Tasks) 
- โทรศัพท์ IP (IP Phones)
- โปรแกรม (Programs)
- แผนก (Departments)
- สาขา (Branches)
- ระบบ Authentication สำหรับผู้ใช้และ Admin

=== เทคโนโลยีที่ใช้ ===
- Go 1.23.0 (ภาษาหลัก)
- Fiber v2 (Web framework)
- MySQL (ฐานข้อมูล)
- Docker (สำหรับ containerization)
- GitLab CI/CD (สำหรับ automation)

=== โครงสร้างโปรเจกต์ ===
reports-api/
├── db/                 - การเชื่อมต่อฐานข้อมูล
├── handlers/           - จัดการ HTTP requests
├── middleware/         - middleware สำหรับ security และ logging
├── models/            - โครงสร้างข้อมูล
├── routes/            - กำหนด API endpoints
├── utils/             - ฟังก์ชันช่วยเหลือ
├── docs/              - เอกสารประกอบ
├── Dockerfile         - สำหรับ production
├── Dockerfile.dev     - สำหรับ development
├── .gitlab-ci.yml     - CI/CD pipeline
└── main.go           - จุดเริ่มต้นของแอป

=== การทำงานของแอปพลิเคชัน ===

1. การเริ่มต้น (Initialization):
   - ตั้งค่า memory limit 384MB
   - จำกัด CPU cores เป็น 2
   - สร้าง custom logger
   - อ่าน command line arguments (dev/prod)

2. การโหลด Environment:
   - โหลดไฟล์ .env.dev สำหรับ development
   - โหลดไฟล์ .env.prod สำหรับ production
   - ใช้ environment variables หากไม่มีไฟล์

3. การเชื่อมต่อฐานข้อมูล:
   - เชื่อมต่อ MySQL database
   - มี error handling และ connection pooling

4. การตั้งค่า Web Server:
   - ใช้ Fiber framework
   - ตั้งค่า CORS สำหรับ cross-origin requests
   - เพิ่ม security headers
   - จำกัดขนาดไฟล์อัปโหลด 100MB
   - ตั้งค่า timeout 30 วินาที

5. การลงทะเบียน Routes:
   - API routes สำหรับ CRUD operations
   - Authentication routes สำหรับ login/register
   - Health check endpoint (GET /)
   - Static file serving

=== API Endpoints หลัก ===

Authentication:
- POST /authEntry/login - เข้าสู่ระบบ
- POST /authEntry/registerUser - สมัครสมาชิก
- POST /authEntry/registerAdmin - สมัคร admin

Problem Management:
- GET /api/v1/problem/list - ดูรายการปัญหา
- POST /api/v1/problem/create - สร้างปัญหาใหม่
- PUT /api/v1/problem/update/{id} - แก้ไขปัญหา
- DELETE /api/v1/problem/delete/{id} - ลบปัญหา

Task Management:
- GET /api/v1/task/list - ดูรายการงาน
- POST /api/v1/task/create - สร้างงานใหม่
- PUT /api/v1/task/update/{id} - แก้ไขงาน
- DELETE /api/v1/task/delete/{id} - ลบงาน

อื่นๆ:
- IP Phone Management: /api/v1/ipphone/*
- Program Management: /api/v1/program/*
- Department Management: /api/v1/department/*
- Branch Management: /api/v1/branch/*

=== การ Build และ Deploy ===

1. Manual Build:
   - Development: docker build -t username/reports-api:dev -f Dockerfile.dev .
   - Production: docker build -t username/reports-api:prod -f Dockerfile .

2. Automated Build (build2.sh):
   - Interactive script ที่ให้เลือก environment
   - มี confirmation prompts
   - Auto login Docker Hub
   - Error handling และ cleanup

3. GitLab CI/CD Pipeline:
   - Push ไป develop branch = auto build dev image
   - Push ไป main branch = manual trigger สำหรับ prod image
   - ใช้ Docker Hub สำหรับเก็บ images

=== Environment Variables ที่สำคัญ ===
- PORT: พอร์ตของเซิร์ฟเวอร์ (default: 5001)
- DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME: การเชื่อมต่อฐานข้อมูล
- JWT_SECRET: สำหรับ JWT token
- TELEGRAM_BOT_TOKEN: สำหรับ Telegram integration
- MINIO_*: สำหรับ file storage

=== Docker Configuration ===

Development (Dockerfile.dev):
- ใช้ Go 1.23-alpine สำหรับ build
- ใช้ alpine:latest สำหรับ runtime
- รันบนพอร์ต 5000
- รันด้วย ./main -d

Production (Dockerfile):
- เหมือน dev แต่รันบนพอร์ต 5001
- รันด้วย ./main -p
- เหมาะสำหรับ production environment

=== Security Features ===
- JWT-based authentication
- CORS configuration
- Security headers (X-Frame-Options, X-XSS-Protection, etc.)
- Input validation
- Error handling และ logging
- Memory และ CPU limits

=== การใช้งาน ===

1. Local Development:
   go run main.go dev

2. Docker Development:
   docker build -t reports-api-dev -f Dockerfile.dev .
   docker run -p 5001:5000 reports-api-dev

3. Health Check:
   curl http://localhost:5001/
   Response: {"status": "OK", "version": "1.0.0"}

=== เอกสารประกอบ ===
- README.md: ภาพรวมและ quick start
- docs/API_USAGE.md: วิธีใช้ API
- docs/INSTALLATION.md: คู่มือติดตั้ง
- docs/DEPLOYMENT.md: คู่มือ deploy
- BUILD_GUIDE.md: คู่มือ build Docker
- swagger.yaml: API documentation
- swagger.html: Swagger UI interface

=== การแก้ปัญหาที่พบบ่อย ===
1. Database connection error: ตรวจสอบ MySQL service และ credentials
2. Port already in use: เปลี่ยนพอร์ตใน environment variables
3. Docker build fails: ตรวจสอบ Dockerfile และ dependencies
4. GitLab CI variables not working: ตรวจสอบ Protected settings
5. Authentication fails: ตรวจสอบ JWT_SECRET และ token expiry

=== Performance Optimization ===
- Memory limit: 384MB
- CPU limit: 2 cores
- Garbage collection: 50%
- Connection timeout: 30 seconds
- File upload limit: 100MB
- Request/response compression

ระบบนี้ถูกออกแบบให้รองรับการใช้งานจริงด้วย scalability, security และ maintainability ที่ดี